/*
 * Handshaking it log on.  There are 3 version numbers:
 * major - no compatibility
 * minor - backwards compatibility
 * patch - backwards and forwards compatibility
 */
struct version {
        unsigned int major;
        unsigned int minor;
        unsigned int patch;
};

/*
 * Protocol accepted by the replicator tcp server.
 */
struct device_binding {
        unsigned int shortname;
        string logical_name<>;
        string path<>;
};

struct io_detail {
        unsigned int dev;           /* this should be the shortname from the binding */
        opaque data<>;
};

typedef hyper transaction_id;

struct drop_detail {
        transaction_id t;
};

struct merge_detail {
        transaction_id t;
};

enum command_type {
        LOGON,

        JOURNAL_OPEN,
        JOURNAL_CLOSE,

        JOURNAL_FIRST_TRANSACTION,
        JOURNAL_LAST_TRANSACTION,

        JOURNAL_IO,
        JOURNAL_COMMIT,
        JOURNAL_ROLLBACK,
        JOURNAL_DROP,

        MERGE
};

union command switch (command_type discriminator) {
case LOGON:
        version logon;

case JOURNAL_OPEN:
        device_binding devices<>;

/*
 * This command will not complete until all merging has been done.  By
 * coupling this behaviour with close we avoid various race conditions.
 */
case JOURNAL_CLOSE:
        void;

case JOURNAL_FIRST_TRANSACTION:
        void;

case JOURNAL_LAST_TRANSACTION:
        void;

case JOURNAL_IO:
        io_detail io;

case JOURNAL_COMMIT:
        void;

case JOURNAL_ROLLBACK:
        void;

case JOURNAL_DROP:
        drop_detail drop;

case MERGE:
        merge_detail merge;
};

/*
 * These to level structures are fixed size, so we can pull them off the
 * socket.
 *
 * The responses do not neccesarily come in request order, so we use
 * |request_id| to tie together request and response.
 */
struct msg_header {
        unsigned int msg_size;
        unsigned int request_id;
};

enum response_code {
        SUCCESS,
        FAIL,
        TRANSACTION_RESPONSE
};

union response switch (response_code discriminator) {
case SUCCESS:
        void;

case FAIL:
        string reason<>;

/* implicit success, but also returns a transaction id.  Used by
   JOURNAL_FIRST_TRANSACTION,
   JOURNAL_LAST_TRANSACTION,
   JOURNAL_COMMIT,
*/
case TRANSACTION_RESPONSE:
        hyper transaction_id;
};

